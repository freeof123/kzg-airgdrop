// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

import { B12, B12_381Lib } from "../src/B12.sol";
import { KZGAirdrop } from "../src/KZGAirdrop.sol";

uint256 constant BLS_MODULUS = 52435875175126190479447740508185965837690552500527637822603658699938581184513;

contract AirdropTest is Test {
  function testAirdropCheckPairing() public {
    // 4 users, values: 101, 198, 297, 396
    B12.G1Point memory initialCommitment = B12.G1Point(
      B12.Fp(
        25616986732562104762254828185185905881,
        70621439248662009915381138121923409331665983306636368971402556438831335229195
      ),
      B12.Fp(
        12077792224320367439819234090793202579,
        23185236109266661531016097504712835792963181405573904788979304919581074191167
      )
    );
    KZGAirdrop airdrop = new KZGAirdrop(initialCommitment);

    bytes memory userInfo = abi.encode(
      address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266),
      uint256(101),
      uint256(1),
      uint256(338717333171073806563082012473487848),
      uint256(91142835586586316180619025372282887337195132636609547017779158467690889229908),
      uint256(29994634936180107261355582765300347304),
      uint256(93990487689489958140531645182103796832827347916540089800150766787906547201564)
    );

    uint256 y = uint256(keccak256(userInfo)) % BLS_MODULUS;
    uint256 z = 1;

    B12.G1Point memory proof = B12.G1Point(
      B12.Fp(
        25534095011235690522216372256111919786,
        111978184275267351327329799946649731051697813125469689713921327262172197733794
      ),
      B12.Fp(
        1734679677366806797240093634627280317,
        62214069568045436929409699613874688306182457228081607279523392750619671432815
      )
    );
    assertEq(airdrop.checkPairing(proof, y, z), true);
    y += 1;
    assertEq(airdrop.checkPairing(proof, y, z), false);
  }

  event UserBlobUpdated(
    B12.G1Point oldCommitment,
    B12.G1Point newCommitment,
    address user,
    uint256 oldvalue,
    uint256 newvalue
  );

  function testAirdropUpdateUser() public {
    // 4 users, values: 101, 198, 297, 396
    B12.G1Point memory initialCommitment = B12.G1Point(
      B12.Fp(
        25616986732562104762254828185185905881,
        70621439248662009915381138121923409331665983306636368971402556438831335229195
      ),
      B12.Fp(
        12077792224320367439819234090793202579,
        23185236109266661531016097504712835792963181405573904788979304919581074191167
      )
    );
    KZGAirdrop airdrop = new KZGAirdrop(initialCommitment);

    // wrong value
    bytes memory userInfo = abi.encode(
      address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266),
      uint256(100),
      uint256(1),
      uint256(338717333171073806563082012473487848),
      uint256(91142835586586316180619025372282887337195132636609547017779158467690889229908),
      uint256(29994634936180107261355582765300347304),
      uint256(93990487689489958140531645182103796832827347916540089800150766787906547201564)
    );

    B12.G1Point memory proof = B12.G1Point(
      B12.Fp(
        25534095011235690522216372256111919786,
        111978184275267351327329799946649731051697813125469689713921327262172197733794
      ),
      B12.Fp(
        1734679677366806797240093634627280317,
        62214069568045436929409699613874688306182457228081607279523392750619671432815
      )
    );

    B12.G1Point memory expectedCommitment = B12.G1Point(
      B12.Fp(
        8944925478296682212662901999301661326,
        108889630425299535801996365237097010108372694046589088686251109883785609406497
      ),
      B12.Fp(
        30178851225250245227897376712614504324,
        17549185588249233897876917567979488124450248515940975724178292631852820808100
      )
    );
    vm.expectEmit(address(airdrop));
    emit UserBlobUpdated(
      initialCommitment,
      expectedCommitment,
      address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266),
      uint256(101),
      uint256(100)
    );

    vm.expectRevert("Pairing check failed");
    airdrop.updateUserBlob(userInfo, 1, proof);

    userInfo = abi.encode(
      address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266),
      uint256(101),
      uint256(1),
      uint256(338717333171073806563082012473487848),
      uint256(91142835586586316180619025372282887337195132636609547017779158467690889229908),
      uint256(29994634936180107261355582765300347304),
      uint256(93990487689489958140531645182103796832827347916540089800150766787906547201564)
    );

    airdrop.updateUserBlob(userInfo, 1, proof);

    assertEq(keccak256(abi.encode(expectedCommitment)), keccak256(abi.encode(airdrop.getCommitment())));
  }

  function testAirdropUpdateAll() public {
    // 4 users, values: 100, 200, 300, 400
    B12.G1Point memory initialCommitment = B12.G1Point(
      B12.Fp(
        21514427209086892547710184713064854914,
        90474517622881658790153556524332696834500207048962105231560699694325974945027
      ),
      B12.Fp(
        31956264471738894799638850248275237477,
        79157332576569885882799207772791156555273736442401499953078233419522491264080
      )
    );

    KZGAirdrop airdrop = new KZGAirdrop(initialCommitment);

    bytes memory userInfo = abi.encode(
      address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266),
      uint256(100),
      uint256(1),
      uint256(338717333171073806563082012473487848),
      uint256(91142835586586316180619025372282887337195132636609547017779158467690889229908),
      uint256(29994634936180107261355582765300347304),
      uint256(93990487689489958140531645182103796832827347916540089800150766787906547201564)
    );

    B12.G1Point memory proof = B12.G1Point(
      B12.Fp(
        21745492265158324363980883355658787450,
        87799493864562369434018063954145979561511348656767970993459023976158704221247
      ),
      B12.Fp(
        7375939906695895227612847210983448866,
        37454861560115094060357312564274958376621660761869226282262777376551839009789
      )
    );

    assertEq(airdrop.checkPairing(proof, uint256(keccak256(userInfo)) % BLS_MODULUS, 1), true, "initial check");

    // deltas: 10, -20, -30, -40

    B12.G1Point memory deltaCommitment;

    deltaCommitment = B12.G1Point(
      B12.Fp(
        27875553599757021714489600686513445676,
        68607132231614164310015065818790493447523045338286411100609112615842992375504
      ),
      B12.Fp(
        23669817231119314246456299267081704344,
        110012473447478185740733236156334965091437523875864878785580658471455637072313
      )
    );

    airdrop.airdrop(deltaCommitment);

    proof = B12.G1Point(
      B12.Fp(
        11834021207539738528494146221388597399,
        68696414553850251783692831077690791781001301359779958261461667868106619072790
      ),
      B12.Fp(
        16572552952455501307435316706001439543,
        4329774496890657063520647985038365139576728605307269760848237229515858271942
      )
    );

    userInfo = abi.encode(
      address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266),
      uint256(110),
      uint256(1),
      uint256(338717333171073806563082012473487848),
      uint256(91142835586586316180619025372282887337195132636609547017779158467690889229908),
      uint256(29994634936180107261355582765300347304),
      uint256(93990487689489958140531645182103796832827347916540089800150766787906547201564)
    );
    console2.logBytes32(bytes32(uint256(keccak256(userInfo)) % BLS_MODULUS));

    // B12.G1Point memory commitment = airdrop.getCommitment();
    // console2.log(commitment.X.a, commitment.X.b, commitment.Y.a, commitment.Y.b);

    assertEq(airdrop.checkPairing(proof, uint256(keccak256(userInfo)) % BLS_MODULUS, 1), true, "user1 check");

    proof = B12.G1Point(
      B12.Fp(
        15300051989969777266529384414848275418,
        60516961943853123750024810114509024131227926931493616763224125085063122992455
      ),
      B12.Fp(
        21672750140273397852780470806665160187,
        105335148240546193893346137349850555936909673143101433538528224319123828735817
      )
    );

    userInfo = abi.encode(
      address(0x70997970C51812dc3A010C7d01b50e0d17dc79C8),
      uint256(180),
      uint256(52435875175126190479447740508185965837690552500527637822603658699938581184512),
      uint256(4597285516706274395352259563225125266),
      uint256(58183464484802582546085038792179353778946989603410488062801320699727465904622),
      uint256(14460258579132944481647340120279181285),
      uint256(77255947282125811112109244791195854520941066215240919541707445126039236317205)
    );

    assertEq(
      airdrop.checkPairing(
        proof,
        uint256(keccak256(userInfo)) % BLS_MODULUS,
        52435875175126190479447740508185965837690552500527637822603658699938581184512
      ),
      true,
      "user2 check"
    );
  }

  function testAirdropAddUser() public {
    // 4 users, values: 100, 200, 300, 400
    B12.G1Point memory initialCommitment = B12.G1Point(
      B12.Fp(
        21514427209086892547710184713064854914,
        90474517622881658790153556524332696834500207048962105231560699694325974945027
      ),
      B12.Fp(
        31956264471738894799638850248275237477,
        79157332576569885882799207772791156555273736442401499953078233419522491264080
      )
    );

    KZGAirdrop airdrop = new KZGAirdrop(initialCommitment);

    bytes memory userInfo = abi.encode(
      address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266),
      uint256(100),
      uint256(1),
      uint256(338717333171073806563082012473487848),
      uint256(91142835586586316180619025372282887337195132636609547017779158467690889229908),
      uint256(29994634936180107261355582765300347304),
      uint256(93990487689489958140531645182103796832827347916540089800150766787906547201564)
    );

    B12.G1Point memory proof = B12.G1Point(
      B12.Fp(
        21745492265158324363980883355658787450,
        87799493864562369434018063954145979561511348656767970993459023976158704221247
      ),
      B12.Fp(
        7375939906695895227612847210983448866,
        37454861560115094060357312564274958376621660761869226282262777376551839009789
      )
    );

    assertEq(airdrop.checkPairing(proof, uint256(keccak256(userInfo)) % BLS_MODULUS, 1), true, "initial check");

    userInfo = abi.encode(
      address(0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65),
      uint256(500),
      uint256(23674694431658770659612952115660802947967373701506253797663184111817857449850),
      uint256(320705904849687441892585068455623934),
      uint256(105092660521352411875788303560873475380707143256382860712615075421559918393225),
      uint256(28305898910895068249044538605027463207),
      uint256(98670123683769151071467018307757547324406698835928797835158576523400698926405)
    );
    airdrop.addUser(userInfo);

    proof = B12.G1Point(
      B12.Fp(
        31299647513089495565177287206624393558,
        14927228926601313356798836079091978161209989753129429614983544351204188028802
      ),
      B12.Fp(
        13400045893732131808069082056039816915,
        114662516846153458768541391662974594939538262678081810861398107076491321144583
      )
    );

    assertEq(
      airdrop.checkPairing(
        proof,
        uint256(keccak256(userInfo)) % BLS_MODULUS,
        23674694431658770659612952115660802947967373701506253797663184111817857449850
      ),
      true,
      "user5 check"
    );
  }
}
